<div class="post-grid-container">
  <% @reviews.each do |review| %>
    <input type="hidden" id="current-review-id" value="<%= review.id %>"> <!-- Javascriptの処理で使う -->
    <div>
      <%= image_tag @user.profile_image, size: '60x60', class: 'rounded-image' %>
    </div>
    <div>
      <div class="user-info">
        <span class="user-name"><%= @user.name %></span>
        <%= image_tag "more.png", size: "20x20", class: "more-icon", data: { review_path: review_path(review) } %>
      </div>
      <span class="formatted-time" data-created-time="<%= review.created_at %>">
        <%= formatted_post_time(review.created_at) %>
      </span>
      <p>
        <span class="heritage-name"><%= review.heritage.name %></span>
        <span>[<%= review.heritage.country.name %>]</span>
      </p>
      <!-- post-contentとmore-see-btnの変えたらダメ（JSの処理に影響するため） -->
      <div class="post-content">
        <p><%= simple_format(review.content) %></p>
      </div>
      <button class="more-see-btn">もっと見る</button>
      <% if review.review_images.attached? %>
        <% review.review_images.each do |image| %>
          <div class="post-img">
            <%= image_tag image.variant(resize_to_limit: [300, 300]) %>
          </div>
        <% end %>
      <% end %> 
      <%= render 'shared/like_and_comment', review: review %>
      <hr class="post-hr">
    </div>
  <% end %>
</div>

<div class="more-popup display-none" id="more-popup">
  <div class="post-delete">
    <div class="delete-header">
      <span>この投稿について</span>
      <%= image_tag "close.png", size: "30x30", class: "close-icon", id: "close-btn" %>
    </div>
    <hr>
    <div class="delete-icon" id="delete-btn">
      <%= image_tag "delete.png", size: "30x30" %>
      投稿を削除する
    </div>
  </div>
</div>

<div>
  <span class="star" id="1" value="1">★</span>
  <span class="star" id="2" value="2">★</span>
  <span class="star" id="3" value="3">★</span>
  <span class="star" id="4" value="4">★</span>
  <span class="star" id="5" value="5">★</span>
  <span class="score" id="review-score">0</span>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var body = document.body;
    var closeBtn = document.getElementById('close-btn');
    var morePopup = document.getElementById('more-popup');
    var moreBtns = document.querySelectorAll('.more-icon');
    var deleteBtn = document.getElementById('delete-btn');
    var grayOut = document.getElementById('gray-out');

    closeBtn.addEventListener('click', function() {
      morePopup.classList.add('display-none');
      grayOut.classList.add('display-none');
    });

    moreBtns.forEach(function(moreBtn) {
      moreBtn.addEventListener('click', function() {
        morePopup.classList.remove('display-none');
        grayOut.classList.remove('display-none');
        // クリックされたmore-iconに対応するレビューのURLを取得
        currentReviewUrl = this.getAttribute('data-review-path');
      });
    });

    deleteBtn.addEventListener('click', function() {
      var confirmation = confirm('本当に削除しますか？');
      if (confirmation) {
        var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        fetch(currentReviewUrl, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": csrfToken,
            "Content-Type": "application/json"
          }
        })
        .then(response => {
          if (response.ok) {
            window.location.reload();
          } else {
            alert('削除に失敗しました');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('削除に失敗しました');
        });
      } else {
        morePopup.classList.add('display-none');
        body.classList.remove('background-gray');
      }
    });

    // 「もっと見る」ボタンをクリックした時の処理
    var moreSeeBtns = document.querySelectorAll('.more-see-btn');
    moreSeeBtns.forEach(function(moreSeeBtn) {
      moreSeeBtn.addEventListener('click', function() {
        var prev = moreSeeBtn.previousElementSibling;
        if(prev.classList.contains('active') === true) {
          prev.classList.remove('active');
          moreSeeBtn.textContent = 'もっと見る';
        }else{
          prev.classList.add('active');
          moreSeeBtn.textContent = '閉じる'; 
        }
      });
    });

    // 投稿のheightがmax-heightに達したら「もっと見る」ボタンを非表示にする
    var postContents = document.querySelectorAll('.post-content');
    postContents.forEach(function(postContent) {
      if (postContent.scrollHeight < 150) {
        postContent.classList.add('active');
        var btn = postContent.nextElementSibling;
        btn.classList.add("display-none");
      }
    });    

    // イイねボタン押した時の処理
    var likeIcons = document.querySelectorAll('.like-icon');
    var heartRedIcons = document.querySelectorAll('.heart-red-icon');

    likeIcons.forEach(function(likeIcon) {
      likeIcon.addEventListener('click', function() {
        var currentReviewId = this.getAttribute('data-review-id');
        var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        fetch("/likes", {
          method: "POST",
          headers: {
            "X-CSRF-Token": csrfToken,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ review_id: currentReviewId })
        })
        .then(response => {
          if (response.ok) {
            window.location.reload();
          } else {
            alert('いいねに失敗しました');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('いいねに失敗しました');
        });
      });
    });

    heartRedIcons.forEach(function(heartRedIcon) {
      heartRedIcon.addEventListener('click', function() {
        var currentReviewId = this.getAttribute('data-review-id');
        var currentReviewURL = `/likes/${currentReviewId}`;
        var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        fetch(currentReviewURL, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": csrfToken,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ review_id: currentReviewId })
        })
      });
    });

// 星評価
var stars = document.getElementsByClassName("star");
var clicked = false;
  for (let i = 0; i < stars.length; i++) {
    stars[i].addEventListener(
      "mouseover",
      () => {
        if (!clicked) {
          for (let j = 0; j <= i; j++) {
            stars[j].style.color = "#FF9900";
          }
        }
      },
      false
    );

    stars[i].addEventListener(
      "mouseout",
      () => {
        if (!clicked) {
          for (let j = 0; j < stars.length; j++) {
            stars[j].style.color = "#a09a9a";
          }
        }
      },
      false
    );

    stars[i].addEventListener(
      "click",
      () => {
        clicked = true;
        for (let j = 0; j <= i; j++) {
          stars[j].style.color = "#FF9900";
        }
        for (let j = i + 1; j < stars.length; j++) {
          stars[j].style.color = "#a09a9a";
        }
      },
      false
    );
};

    //マウスオーバー時の例
    //var helloElement = document.getElementById('hello');
    //var toolTip = document.getElementById('tooltip');

    //helloElement.addEventListener('mouseover', (event) => {
    //  console.log(toolTip)
    //  var timeValue = helloElement.getAttribute('data-time');
    //  toolTip.classList.remove('display-none');
    //});
  });
</script>
